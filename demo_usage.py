#!/usr/bin/env python3
"""
Demo script showing CLI command usage examples.

This script demonstrates how to use the Texas Hold'em MCCFR system.
Run with: python demo_usage.py
"""

import sys
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / 'src'))

print("=" * 70)
print("Texas Hold'em MCCFR + Real-time Search Demo")
print("=" * 70)
print()

print("This system provides a complete poker AI with:")
print("  • Computer vision for table state detection")
print("  • MCCFR blueprint strategy training")
print("  • Real-time subgame solving")
print("  • Safe execution with multiple guardrails")
print()

print("=" * 70)
print("WORKFLOW EXAMPLE")
print("=" * 70)
print()

print("Step 1: Calibrate your poker table")
print("-" * 70)
print("$ python -m holdem.cli.profile_wizard \\")
print("    --window-title 'MyPokerTable' \\")
print("    --out assets/table_profiles/my_table.json")
print()
print("This captures your poker table and creates a calibration profile.")
print()

print("Step 2: Build hand abstraction buckets")
print("-" * 70)
print("$ python -m holdem.cli.build_buckets \\")
print("    --hands 500000 \\")
print("    --k-preflop 12 --k-flop 60 --k-turn 40 --k-river 24 \\")
print("    --config assets/abstraction/buckets_config.yaml \\")
print("    --out assets/abstraction/precomputed_buckets.pkl")
print()
print("This creates hand clusters for game abstraction.")
print("Time: ~10-30 minutes depending on CPU")
print()

print("Step 3: Train blueprint strategy")
print("-" * 70)
print("$ python -m holdem.cli.train_blueprint \\")
print("    --iters 2500000 \\")
print("    --buckets assets/abstraction/precomputed_buckets.pkl \\")
print("    --logdir runs/blueprint")
print()
print("This trains the base strategy using MCCFR.")
print("Time: Several hours to days depending on iterations")
print("Checkpoints saved every 100k iterations")
print()

print("Step 4: Evaluate your strategy")
print("-" * 70)
print("$ python -m holdem.cli.eval_blueprint \\")
print("    --policy runs/blueprint/avg_policy.json \\")
print("    --episodes 200000")
print()
print("This tests your strategy against baseline agents.")
print("Time: ~30-60 minutes")
print()

print("Step 5: Run in dry-run mode (safe testing)")
print("-" * 70)
print("$ python -m holdem.cli.run_dry_run \\")
print("    --profile assets/table_profiles/my_table.json \\")
print("    --policy runs/blueprint/avg_policy.json \\")
print("    --time-budget-ms 80 --min-iters 100")
print()
print("This observes your table and suggests actions WITHOUT clicking.")
print("Safe for testing vision system and strategy.")
print()

print("Step 6: Auto-play mode (USE WITH CAUTION)")
print("-" * 70)
print("$ python -m holdem.cli.run_autoplay \\")
print("    --profile assets/table_profiles/my_table.json \\")
print("    --policy runs/blueprint/avg_policy.json \\")
print("    --time-budget-ms 80 \\")
print("    --confirm-every-action true \\")
print("    --i-understand-the-tos")
print()
print("⚠️  WARNING: This will click on your screen!")
print("⚠️  Only use with explicit permission from poker platform")
print("⚠️  Developers assume NO liability for misuse")
print()

print("=" * 70)
print("SAFETY FEATURES")
print("=" * 70)
print()
print("  ✓ Dry-run mode by default (no clicking)")
print("  ✓ Requires --i-understand-the-tos flag for auto-play")
print("  ✓ Optional confirmation for every action")
print("  ✓ Minimum delays between actions")
print("  ✓ PyAutoGUI failsafe (move mouse to corner to abort)")
print("  ✓ Session time limits (4 hours)")
print("  ✓ Action count limits (5000 actions)")
print()

print("=" * 70)
print("TESTING")
print("=" * 70)
print()
print("Run the test suite:")
print("$ pytest tests/ -v")
print()
print("Individual test modules:")
print("  • tests/test_bucketing.py      - Bucket stability and ranges")
print("  • tests/test_mccfr_sanity.py   - MCCFR convergence")
print("  • tests/test_realtime_budget.py - Time budget adherence")
print("  • tests/test_vision_offline.py  - Vision accuracy")
print()

print("=" * 70)
print("NEXT STEPS")
print("=" * 70)
print()
print("1. Install dependencies:")
print("   $ pip install -r requirements.txt")
print()
print("2. Read the full documentation:")
print("   $ cat README.md")
print()
print("3. Start with calibration:")
print("   $ python -m holdem.cli.profile_wizard --help")
print()
print("4. Review code structure:")
print("   $ tree src/holdem")
print()

print("=" * 70)
print("For more information, see README.md")
print("=" * 70)
